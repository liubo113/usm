syntax = "proto3";

package api.account.v1;

option go_package = "usm/api/account/v1;v1";

import "google/api/annotations.proto";
import "validate/validate.proto";
import "errors/errors.proto";

service Account {
  // 创建用户
	rpc CreateUser (CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/account/v1/users",
      body: "*"
    };
  };
  // 更新用户信息
	rpc UpdateUser (UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      put: "/account/v1/users/{id}",
      body: "*"
    };
  };
  // 设置用户密码
  rpc SetUserPassword(SetUserPasswordRequest) returns (SetUserPasswordResponse) {
    option (google.api.http) = {
      post: "/account/v1/users:set-password",
      body: "*"
    };
  };
  // 删除用户
	rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/account/v1/users/{id}"
    };
  };
  // 查询用户
	rpc GetUser (GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/account/v1/users/{id}"
    };
  };
  // 查询用户列表
	rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/account/v1/users"
    };
  };
  // 认证
  rpc Authenticate (AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {
      post: "/account/v1/users:authenticate",
      body: "*"
    };
  };
}

enum ErrorReason {
  option (errors.default_code) = 400;
  // 用户未找到
  USER_NOT_FOUND = 0 [(errors.code) = 404];
  // 用户已存在
  USER_ALREADY_EXISTED = 1;
  // 账号或密码错误
  MISMATCH_USERNAME_PASSWORD = 2;
}

message User {
  // 用户 ID
  int64 id = 1;
  // 用户名，全局唯一
  string username = 2;
  // 邮箱
  string email = 3;
  // 创建时间
  int64 create_time = 4;
  // 更新时间
  int64 update_time = 5;
}

message CreateUserRequest {
  string username = 1  [(validate.rules).string = {min_len: 2, max_len: 50}];
  string email = 2;
}

message UpdateUserRequest {
  int64 id = 1;
  string email = 2;
}

message SetUserPasswordRequest {
  int64 id = 1;
  string password = 2;
}

message SetUserPasswordResponse {}

message DeleteUserRequest {
  int64 id = 1;
}

message DeleteUserResponse {}

message GetUserRequest {
  int64 id = 1;
}

message ListUsersRequest {
  message Filters {}
  int64 limit = 1;
  int64 offset = 2;
  Filters filters = 3;
}

message ListUsersResponse {
  repeated User users = 1;
}

message AuthenticateRequest {
  message BasicAuth {
    string username = 1;
    string password = 2;
  }
  oneof auth_method {
    BasicAuth basic_auth = 1 [(validate.rules).message.required = true];
  }
}

message AuthenticateResponse {}
